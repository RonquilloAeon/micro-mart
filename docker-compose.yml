version: '3.9'
services:
  iam:
    build:
      context: iam
      dockerfile: Dockerfile
      target: development
    container_name: mm_iam
    depends_on:
      - db
      - pool
    env_file:
      - ./iam/.env
    environment:
      - DB_HOST=pool
      - DB_NAME=iam
      - DB_PORT=6432
      - DB_PASSWORD=pgpass
      - DB_USER=mmadmin
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - SECRET_KEY=development_v3xncko0z_piam6q_wa8isugi_0gkdi0h9mc5y0
    platform: linux/amd64
    ports:
      - "8010:8000"
    restart: on-failure
    volumes:
      - ./iam/src:/app/src

  db:
    build:
      context: db
      dockerfile: Dockerfile
    environment:
      # See https://www.amarjanica.com/docker-multiple-postgres-databases
      # And see https://github.com/mrts/docker-postgresql-multiple-databases
      - POSTGRES_MULTIPLE_DATABASES=iam,retail
      - POSTGRES_PASSWORD=pgpass
      - POSTGRES_USER=mmadmin
    platform: linux/amd64
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - ./.db:/var/lib/postgresql/data

  pool:
    build:
      context: pool
      dockerfile: Dockerfile
    container_name: mm_db_pool
    depends_on:
      - db
    platform: linux/amd64
    restart: on-failure

  retail:
    build:
      context: retail
      dockerfile: Dockerfile
      target: development
    container_name: mm_retail
    depends_on:
      - db
      - pool
      - redpanda
    env_file:
      - ./retail/.env
    environment:
      - DB_HOST=pool
      - DB_NAME=retail
      - DB_PORT=6432
      - DB_PASSWORD=pgpass
      - DB_USER=mmadmin
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - SECRET_KEY=development_j2q7fzr1x_9m8vo6c_5lb3thye_x1w0u7k9qz6n2
    platform: linux/amd64
    ports:
      - "8012:8000"
    restart: on-failure
    volumes:
      - ./retail/src:/app/src

  redpanda:
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    container_name: mm_redpanda
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.8
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    volumes:
      - ./.redpanda:/var/lib/redpanda/data

  redpandaconsole:
    depends_on:
      - redpanda
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    container_name: mm_redpanda_console
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    image: docker.redpanda.com/redpandadata/console:latest
    ports:
      - "8080:8080"

  router:
    container_name: mm_router
    depends_on:
      - iam
      - retail
    image: ghcr.io/apollographql/router:v1.28.1
    environment:
      APOLLO_ROUTER_SUPERGRAPH_PATH: /router/supergraph.graphql
      APOLLO_ROUTER_CONFIG_PATH: /router/router.yml
      APOLLO_ROUTER_LOG: debug
      APOLLO_TELEMETRY_DISABLED: true
    ports:
      - 4000:4000
    restart: on-failure
    volumes:
      - ./router/config:/router
